/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index.route'
import { Route as TopicIndexRouteImport } from './routes/topic/index.route'
import { Route as TopicNewIndexRouteImport } from './routes/topic/new/index.route'
import { Route as TopicNameIndexRouteImport } from './routes/topic/$name/index.route'

// Create/Update Routes

const IndexRouteRoute = IndexRouteImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TopicIndexRouteRoute = TopicIndexRouteImport.update({
  path: '/topic/',
  getParentRoute: () => rootRoute,
} as any)

const TopicNewIndexRouteRoute = TopicNewIndexRouteImport.update({
  path: '/topic/new/',
  getParentRoute: () => rootRoute,
} as any)

const TopicNameIndexRouteRoute = TopicNameIndexRouteImport.update({
  path: '/topic/$name/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRoute
    }
    '/topic/': {
      id: '/topic/'
      path: '/topic'
      fullPath: '/topic'
      preLoaderRoute: typeof TopicIndexRouteImport
      parentRoute: typeof rootRoute
    }
    '/topic/$name/': {
      id: '/topic/$name/'
      path: '/topic/$name'
      fullPath: '/topic/$name'
      preLoaderRoute: typeof TopicNameIndexRouteImport
      parentRoute: typeof rootRoute
    }
    '/topic/new/': {
      id: '/topic/new/'
      path: '/topic/new'
      fullPath: '/topic/new'
      preLoaderRoute: typeof TopicNewIndexRouteImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRouteRoute
  '/topic': typeof TopicIndexRouteRoute
  '/topic/$name': typeof TopicNameIndexRouteRoute
  '/topic/new': typeof TopicNewIndexRouteRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRouteRoute
  '/topic': typeof TopicIndexRouteRoute
  '/topic/$name': typeof TopicNameIndexRouteRoute
  '/topic/new': typeof TopicNewIndexRouteRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRouteRoute
  '/topic/': typeof TopicIndexRouteRoute
  '/topic/$name/': typeof TopicNameIndexRouteRoute
  '/topic/new/': typeof TopicNewIndexRouteRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/topic' | '/topic/$name' | '/topic/new'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/topic' | '/topic/$name' | '/topic/new'
  id: '__root__' | '/' | '/topic/' | '/topic/$name/' | '/topic/new/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRouteRoute: typeof IndexRouteRoute
  TopicIndexRouteRoute: typeof TopicIndexRouteRoute
  TopicNameIndexRouteRoute: typeof TopicNameIndexRouteRoute
  TopicNewIndexRouteRoute: typeof TopicNewIndexRouteRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRouteRoute: IndexRouteRoute,
  TopicIndexRouteRoute: TopicIndexRouteRoute,
  TopicNameIndexRouteRoute: TopicNameIndexRouteRoute,
  TopicNewIndexRouteRoute: TopicNewIndexRouteRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/topic/",
        "/topic/$name/",
        "/topic/new/"
      ]
    },
    "/": {
      "filePath": "index.route.tsx"
    },
    "/topic/": {
      "filePath": "topic/index.route.tsx"
    },
    "/topic/$name/": {
      "filePath": "topic/$name/index.route.tsx"
    },
    "/topic/new/": {
      "filePath": "topic/new/index.route.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
